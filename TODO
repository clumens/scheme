* add functions to the standard library:
    - Char: char->integer, char-alphabetic?, char-downcase, char-numeric?, char-upcase, char-whitespace?, integer->char
    - IO: ???
    - List: list-tail
    - Math: div, max, min, mod, number->string, string->number
    - String: list->string, string-downcase, string-upcase
    - System: exit
* convert functions to take varargs:
    - Booleans: boolean=?
    - Char: char=?, char<?, char>?, char<=?, char>=?
    - List: exists, for-all, map, partition
    - Math: <, >, <=, >=
    - String: string=?, string<?, string>?, string<=?, string>=?
* move things from haskell to scheme:
    - Control: case, if

* add exceptions
* add floating point numbers
* add pairs
* add records (?)
* add unquote and quasiquote (?)
* add vararg syntax to lambdas
* can LanguageDef and TokenParser be used to eliminate parsing code?
* convert things to use tail recursion
* do defines work in the body of a lambda or let?
* do escaped characters work in strings?
* how do multiple return values work?
* strings that are just whitespace get reduced to empty
* test cases for all stdlib functions
