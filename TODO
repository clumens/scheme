* add functions to the standard library:
    - Char: char->integer, char-alphabetic?, char-downcase, char-numeric?, char-upcase, char-whitespace?, integer->char
    - Control: case
    - IO: ???
    - Math: div, max, min, mod, number->string, string->number
    - String: string-downcase, string-upcase
    - System: exit
* convert functions to take varargs:
    - Booleans: boolean=?
    - List: exists, for-all, map, partition
    - String: string<?, string>?, string<=?, string>=?
* move things from haskell to scheme:
    - Control: if

* add exceptions
* add floating point numbers
* add pairs
* add records (?)
* add unquote and quasiquote (?)
* more vararg syntax support:
    (lambda lst ...)
    (lambda (fn . lst) ...)
* convert things to use tail recursion
* do defines work in the body of a lambda or let?
* how do multiple return values work?
* test cases for all stdlib functions
