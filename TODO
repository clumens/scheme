* add functions to the standard library:
    - Char: char-alphabetic?, char-downcase, char-numeric?, char-upcase, char-whitespace?
    - Control: case
    - Floats: /, ceiling, floor, round, truncate
    - IO: ???
    - Math: expt, number->string, string->number
    - String: string-downcase, string-upcase
    - System: exit
* convert functions to take varargs:
    - List: exists, for-all, map, partition
    - String: string<?, string>?, string<=?, string>=?
* move things from haskell to scheme:
    - Control: cond

* add pairs
* add records
* add unquote and quasiquote (?)
* audit stdlib:
    - documentation for all functions
    - raise exceptions where appropriate
    - test cases for all functions
    - type checking for all functions
* documentation:
    - explain all exceptions that can be raised by a function
    - for anything that takes a function, explain how many parameters it accepts
* exceptions:
    - Exceptions.hs is getting way too verbose
    - allow user-defined make-*-error functions to take multiple arguments
    - document error types
    - get predicate functions working for subtyping
    - start raising exceptions throughout library.scm
* convert things to use tail recursion
* do defines work in the body of a lambda or let?
* fix numeric operations in the primitive environment
* how do multiple return values work?
